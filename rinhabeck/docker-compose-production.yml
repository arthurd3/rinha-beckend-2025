# Configurações do Docker Compose para compatibilidade multiplataforma
version: '3.8'

services:
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api1
      - api2
    ports:
      - "9999:9999"
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "30MB"
    restart: unless-stopped

  api1: &api
    build: 
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/amd64
        - linux/arm64
    hostname: api1
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/rinha
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=123
      - SPRING_DATA_REDIS_HOST=cache
      - SPRING_DATA_REDIS_PORT=6379
      - PAYMENT_PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PAYMENT_PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
    depends_on:
      db:
        condition: service_healthy
      cache:
        condition: service_started
    networks:
      - backend
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "90MB"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"] 
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api2:
    <<: *api
    hostname: api2

  db:
    image: postgres:16-alpine
    hostname: db
    environment:
      - POSTGRES_DB=rinha
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d rinha -U admin"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "110MB"
    restart: unless-stopped

  cache:
    image: redis:7.2-alpine
    hostname: cache
    command: redis-server --maxmemory 20mb --maxmemory-policy allkeys-lru
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.05"
          memory: "30MB"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  backend:
    driver: bridge
  payment-processor:
    external: true

volumes:
  postgres-data:
    driver: local
